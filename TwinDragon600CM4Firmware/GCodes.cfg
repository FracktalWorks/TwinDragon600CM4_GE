[gcode_macro G29]
gcode:
 BED_MESH_CLEAR
 BED_MESH_CALIBRATE
 #Z_OFFSET_APPLY_PROBE
 BED_MESH_PROFILE SAVE=p1
 SAVE_CONFIG NO_RESTART=1
 #BED_MESH_OFFSET X=-20
 #BED_MESH_OFFSET X=140
 #G1 X0 Y430 Z5 F4000
 M420 S1
 #BED_MESH_PROFILE LOAD=p1
 #BED_MESH_OFFSET X=140
 #G28
 #G1 Z296.900
 #G1 Z297

[gcode_macro M420]
gcode:
 {% if params.S == '1' %}
  BED_MESH_PROFILE LOAD=p1
 {% endif %}
 {% if params.S == '0' %}
  BED_MESH_PROFILE REMOVE=p1
 {% endif %}

[gcode_macro M218]
gcode:
 {% if params.T =='1' %}
  {% if params.X %}
  SAVE_VARIABLE VARIABLE=tool_offset_x VALUE={params.X|float}
  {% endif %}
  {% if params.Y %}
  SAVE_VARIABLE VARIABLE=tool_offset_y VALUE={params.Y|float}
  {% endif %}
  {% if params.Z %}
  SAVE_VARIABLE VARIABLE=tool_offset_z VALUE={params.Z|float}
  {% endif %}
 {% endif %}
[gcode_macro M500]
gcode:
    SAVE_CONFIG NO_RESTART=1

[gcode_macro M503]
gcode:
 RESPOND TYPE=echo MSG="M218 T1 X{printer.save_variables.variables.tool_offset_x} Y{printer.save_variables.variables.tool_offset_y} Z{printer.save_variables.variables.tool_offset_z}"
 RESPOND TYPE=echo MSG="M851 Z{printer.configfile.config.probe.z_offset}"
 
########################################
# Homing Sequence
########################################

[homing_override]
gcode:
 BED_MESH_CLEAR
 {% if params.X and not params.Y and not params.Z %}
        G28 X
    {% endif %}
    {% if not params.X and params.Y and not params.Z %}
        G28 Y
    {% endif %}
    {% if not params.X and not params.Y and params.Z %}
        G28 Z
        #G91
        #G0 Z-1
        #G91
        #G0 Z1
    {% endif %}    
    {% if params.Y and params.X and not params.Z %}
        G28 Y
        G28 X
    {% endif %}
    {% if not params.X and not params.Y and not params.Z %}
        # G1 Z10 F6 # No need to do this, G28 Z already does it. Move Z up just incase the nozzle is too close to the bed before homing (can be the case in cancelled prints/powercuts/emergency stops)
        G28 Z # Home z, because detector is on the bed, not the nozzle
        G28 Y # Do Y next, to avoid potentially hitting the back of the nozzle wipe.
        G28 X
        #G90
        #G0 Z296
        #G90
        #G0 Z297
    {% endif %}
    {% if params.X and params.Y and params.Z %}
        G28 Z
        G28 Y
        G28 X
    {% endif %}

[gcode_macro M290]
gcode:
 SET_GCODE_OFFSET Z_ADJUST={params.Z|default(0.0)} MOVE=1
 Z_OFFSET_APPLY_PROBE
 SAVE_CONFIG NO_RESTART=1
 
[gcode_macro M851]
gcode:
 {% if params.Z %}
 SET_GCODE_OFFSET Z={params.Z|default(0.0)}
 Z_OFFSET_APPLY_PROBE
 SAVE_CONFIG
 {% endif %}

 
 
[gcode_macro M109]
#rename_existing: M109.1
#default_parameter_S: off
#default_parameter_R: off
#default_parameter_T: -1

variable_tolerance: 4.0


gcode:
    

    {% if params.S %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.S}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.S|float - tolerance}

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={params.S}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={params.S|float - tolerance}

        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={params.S}
            TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={params.S|float - tolerance}

        {% endif %}


    {% elif params.R %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.R}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={params.R}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}


        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={params.R}
            TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}

        {% endif %}



    {% else %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0

        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET=0

        {% endif %}

        
    {% endif %}
    
[gcode_macro M190]
rename_existing: M190.1
#default_parameter_S: off
#default_parameter_R: off
variable_tolerance: 1.0
gcode:
    #RESPOND TYPE=ECHO MSG="TEST"
    {% if params.S %}
        M140 S{params.S}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.S|float - tolerance}
    {% elif params.R %}
        M190.1 S{params.R}
    {% else %}
        M140 S0
    {% endif %}
    
[gcode_macro PAUSE]
rename_existing: PAUSE1
gcode:
 PAUSE1
 {% if printer.toolhead.extruder == 'extruder' %}
 SAVE_GCODE_STATE NAME=toolhead_state
 G91
 G1 Z5
 G90
 G1 X0 Y0 E-10 F4000
 {% else %}
  {% if printer.toolhead.extruder == 'extruder1' %}
  SAVE_GCODE_STATE NAME=toolhead_state
  G91
  G1 Z5
  G90
  G1 X70 Y0 E-10 F4000
  {% endif %}
 {% endif %}
 
[gcode_macro RESUME]
rename_existing: RESUME1
gcode:
  RESUME1
  G91
  G1 Z-10
  G90
  G1 E5 F4500
  G1 E5 F4500
  RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED=4500
  
[filament_motion_sensor SFS_T0]
detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
extruder: extruder
switch_pin: ^PF0
pause_on_runout: True ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    #M117 Runout Detected!
    RESPOND TYPE=echo MSG="Filament Runout on T0"
    
[filament_motion_sensor SFS_T1]
detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
extruder: extruder1
switch_pin: ^PC15
pause_on_runout: True ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    #M117 Runout Detected!
    RESPOND TYPE=echo MSG="Filament Runout on T1"

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_T1 ENABLE=0

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    #M117 #ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_T1 ENABLE=1

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    #M117 #DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_T1 ENABLE=0
    
###################################################################
####################Start for Door lock####################
################################################################

[output_pin door_lock_pin]
pin: PA5
pwm: False
value: 0
shutdown_value : 0

[gcode_macro DoorToggle]
gcode:
    {% if printer.save_variables.variables.door_status == 1 %}
        M514 S0
    {% elif printer.save_variables.variables.door_status == 0 %}
        M514 S1
    {% endif %}

[gcode_macro M514]
gcode:
    {% if params.S == '0' %}
        SET_PIN PIN=door_lock_pin VALUE=0
        RESPOND TYPE=echo MSG="Door Open"
        SAVE_VARIABLE VARIABLE=door_status VALUE=0
    {% endif %}
    
    {% if params.S == '1' %}
        SET_PIN PIN=door_lock_pin VALUE=1
        RESPOND TYPE=echo MSG="Door Closed"
        SAVE_VARIABLE VARIABLE=door_status VALUE=1
    {% endif %}


###################################################################
##################################################################
####################End############################################

[gcode_macro Door_Status]
gcode:
 RESPOND TYPE=echo MSG="{printer.save_variables.variables.door_status}"
 
[gcode_macro M114]
rename_existing: M114.1
gcode:
    GET_POSITION
    
    
    
[gcode_macro M114]
rename_existing: M114.1
gcode:
    RESPOND TYPE=echo MSG="Count {printer.gcode_move.gcode_position}"